Título: Práctica 2 de Algoritmos "Ordenación por inserción y ordenación shell"

Brais García Brenlla
Ángel Álvarez Rey

Os test foron realizados con unha máquina con estas especificacións:

OS:
  Ubuntu 18.04.3 LTS
CPU:
  Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz
  1 physical processor; 4 cores; 8 threads
RAM:
  16376964 KiB

---------------------------------INTRODUCCIÓN-----------------------------------

Neste exercicio medimos os tempos de execución do algoritmo ordenador de
montículos. Previamente comprobamos se a funcion crearMonticulo funciona
correctamente; Posteriormente comprobamos se ao introducir un
vector aleatorio se devolve ben ordenado e facemos o mesmo para un vector
descendente; Finalmente comprobamos se a complexidade de crearMonticulo é O(n) e
calculamos empíricamente a complexidade do algoritmo para 3 situacións iniciais
(vector ascendente, vector desdencente e vector aleatorio).


Para esta práctica debemos ter en conta:

1.-O tempo estará sempre medido en microsegundos.

2.-Aquelas filas marcadas por '*' estarán medidas con respecto a 1000 iteracións,
   pois o tempo de cada iteración é menor de 500 microsegundos e sería inexacto
   debido ás aproximacións.

3.-No caso de apareceren valores anómalos serán indicados neste arquivo.

4.-As columnas representan o valor aplicado á función, o tempo medido, unha cota
   subestimada, outra axustada e outra sobreestimada respectivamente.

5.-Os valores aplicados á función son resultado dunha progresión xeométrica de
   de razón 2 empezando en 250.

6.-O programa debe ser compilado co argumento -lm para funcionar correctamente.

Agora imos analizar as táboas que conteñen os datos aos que se aplica cada
función, tempo de execución e cotas.




-----------------------Comprobación da complexidade-----------------------------
                            de crearMonticulo

Monticulo de minimos de un vector aleatorio

               n            t(n)     t(n)/n^0.85          t(n)/n      t(n)/n^1.2
            250*           4.514        0.041334        0.018056        0.010395
            500*           9.539        0.048459        0.019078        0.010248
           1000*          19.556        0.055116        0.019556        0.009801
           2000*          38.157        0.059662        0.019078        0.008922
           4000*          74.127        0.064302        0.018532        0.008086
           8000*         145.099        0.069829        0.018137        0.007384
          16000*         287.519        0.076765        0.017970        0.006826
          32000          670.000        0.099242        0.020938        0.007420
          64000         1167.000        0.095900        0.018234        0.006029

ANOMALÍAS:-

Cota subestimada: pow(n,0.85)
Cota axustada: n
Cota sobreestimada: pow(n,1.2)

Observacións:
1.- Os resultados da columna da cota subestimada tenden a infinito.
2.- Os resultados da cota axustada atópanse no intervalo [0.017970,0.020938].
3.- Os resultados da cota sobreestimada tenden a 0.

Como se pode observar, o algoritmo ten unha complexidade de O(n).

-----------------------Comprobación da complexidade-----------------------------
                              da ordenación

Ordenación de un vector ordenado

               n            t(n)     t(n)/n^1.05   t(n)/n*log(n)      t(n)/n^1.3
            250*          16.277        0.049401        0.011792        0.012424
            500*          42.216        0.061881        0.013586        0.013086
           1000*         102.282        0.072410        0.014807        0.012877
           2000*         237.037        0.081047        0.015593        0.012119
           4000          567.000        0.093631        0.017091        0.011773
           8000         1110.000        0.088528        0.015439        0.009361
          16000         2307.000        0.088863        0.014895        0.007901
          32000         4943.000        0.091957        0.014891        0.006875
          64000        10851.000        0.097495        0.015321        0.006130

ANOMALÍAS:-

Cota subestimada: pow(n,1.05)
Cota axustada: n*log(n)
Cota sobreestimada: pow(n,1.3)

Observacións:
1.- Os resultados da columna da cota subestimada tenden a infinito.
2.- Os resultados da cota axustada atópanse no intervalo [0.013586,0.015593].
3.- Os resultados da cota sobreestimada tenden a 0.



Ordenación de un vector inversamente ordenado

               n            t(n)     t(n)/n^1.05   t(n)/n*log(n)      t(n)/n^1.3
            250*          18.857        0.075428        0.013661        0.014393
            500*          47.444        0.094888        0.015269        0.014707
           1000*         112.487        0.112487        0.016284        0.014161
           2000*         250.810        0.125405        0.016499        0.012823
           4000          580.000        0.144987        0.017482        0.012043
           8000         1160.000        0.145000        0.016134        0.009782
          16000         2341.000        0.146313        0.015114        0.008018
          32000         4933.000        0.154156        0.014861        0.006861
          64000        11265.000        0.176016        0.015905        0.006364

ANOMALÍAS: -

Cota subestimada: pow(n,1.05)
Cota axustada: n*log(n)
Cota sobreestimada: pow(n,1.3)

Observacións:
1.- Os resultados da columna da cota subestimada tenden a infinito.
2.- Os resultados da cota axustada atópanse no intervalo [0.015114,0.016499].
3.- Os resultados da cota sobreestimada tenden a 0.



Ordenación de un vector aleatorio

               n            t(n)     t(n)/n^1.05   t(n)/n*log(n)      t(n)/n^1.3
            250*          26.004        0.078923        0.018838        0.019848
            500*          60.167        0.088194        0.019363        0.018651
           1000*         133.518        0.094524        0.019329        0.016809
           2000*         294.465        0.100682        0.019370        0.015055
           4000          635.000        0.104860        0.019140        0.013185
           8000         1418.000        0.113092        0.019723        0.011958
          16000         2962.000        0.114093        0.019124        0.010144
          32000         6253.000        0.116327        0.018837        0.008697
          64000        14777.000        0.132769        0.020864        0.008347

ANOMALÍAS:-

Cota subestimada: pow(n,1.05)
Cota axustada: n*log(n)
Cota sobreestimada: pow(n,1.3)

Observacións:
1.- Os resultados da columna da cota subestimada tenden a infinito.
2.- Os resultados da cota axustada atópanse no intervalo [0.018837,0.020864].
3.- Os resultados da cota sobreestimada tenden a 0.

-----------------------------------CONCLUSIÓN-----------------------------------

Nesta práctica tívose que facer uso da repetición da función en todas as probas
elaboradas, xa que o algoritmo de ordenación de montículos é bastante eficiente
e precisa un vector relativamente grande para superar os 500 microsegundos.

Vistos os resultados de crearMonticulo podemos concluír que sí se axusta a O(n),
tal e como se pide demostrar na práctica.

Nas ordenacións realizadas observamos que a complexidade do algoritmo se mantén
constante (n*log(n)) sen influír en grandes medidas o vector introducido e o
seu tamaño, polo que podemos afirmar que se trata de un algoritmo estable.
